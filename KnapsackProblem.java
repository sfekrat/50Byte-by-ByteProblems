import java.util.ArrayList;
// Knapsack Problem using Dynamic programming
public class KnapsackProblem {
	public static ArrayList<Integer> knap(int[] w, int[] p, int size, int numOfItems, int maxWeight) {
		// If we don't have exact number of weights and profits.
		if(w.length != p.length) {
			throw new IllegalArgumentException();
		}
		// Table that is being used for population
		// size and number of items are 1 more than the actual arrays.
		// We have to (0,0) pair as well.
		int[][] table = new int[numOfItems][size];
		ArrayList<Integer> res = new ArrayList<>(); // returns weights of the items.
		int[] resOfW = new int[numOfItems -1]; // returns what items in the list we have selected.
		
		// Formula that populates the list :
		// v[i,j] = max(v[i-1, j] , v[i-i, j - w[i-1] + p[i-1])
		for (int i = 1; i < numOfItems; i++) {
			for (int j = 0; j < size; j++) {
				int secIndex = j - w[i-1];
				if(secIndex < 0) {
					table[i][j] = table[i-1][j];
				}
				else {					
					table[i][j] = Math.max(table[i-1][j], (table[i-1][secIndex] + p[i-1]));
				}
			}
		}
		// Bottom-up approach of dynamic programming
		for (int i = numOfItems - 1, j = size -1, k = 0; maxWeight != 0; i--) {
			// If current profit generated by this item also exist in upper row
			// then ignore this item.
			if(table[i][j] == table[i-1][j]) {
				continue;
			}
			// else add the item into the result
			// and subtract the remaining weight from maxWeight
			// Update the j index to point to the next profit.
			else {
				res.add(w[i-1]); 
				j = j - res.get(k);
				maxWeight -= res.get(k++);
				resOfW[i-1] = 1;
			}
		}
		// prints the items selected. Displays 1 for selected
		// zero for unselected items.
		for(int i : resOfW) {
			System.out.print(i + " ");
		}
		System.out.println();
		return res;
	}
 	public static void main(String[] args) {
		int[] w = {2, 1, 3, 2};
		int[] p = {12,10,20,15};
		int numOfItems = w.length + 1;
		int maxWeight = 5;
		int capacity = maxWeight +1;
		System.out.println(knap(w, p, capacity, numOfItems, maxWeight));
	}
}
